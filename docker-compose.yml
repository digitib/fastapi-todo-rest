version: "3.8"

services:
  api:
    extends:
      file: ./docker-compose.common.yml
      service: application
    container_name: todo_api
    command:
      [
        "uvicorn",
        "src.main:application",
        "--reload",
        "--host",
        "0.0.0.0",
        "--port",
        "8000"
      ]
    networks:
      - todo_network
    ports:
      - "8000:8000"
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost:8000/ping || exit 1"
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  celery-beat-scheduler:
    extends:
      file: ./docker-compose.common.yml
      service: application
    container_name: todo_celery_beat_scheduler
    command:
      [
        "celery",
        "--app",
        "src.background_tasks.main",
        "beat",
        "--loglevel",
        "info"
      ]
    networks:
      - todo_network
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  celery-worker:
    extends:
      file: ./docker-compose.common.yml
      service: application
    container_name: todo_celery_worker
    command:
      [
        "celery",
        "--app",
        "src.background_tasks.main",
        "worker",
        "--loglevel",
        "info"
      ]
    networks:
      - todo_network
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A src.background_tasks.main inspect ping"
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  postgres:
    image: postgres:15.2-alpine
    container_name: todo_postgres
    command:
      [
        "postgres",
        "-c",
        "timezone=UTC",
        "-c",
        "shared_buffers=2GB",
        "-c",
        "work_mem=16GB",
        # rough estimate of the number of how much memory is available
      # for disk caching by the OS
        "-c",
        "effective_cache_size=4GB"
      ]
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    volumes:
      - todo_postgres_volume:/var/lib/postgresql/data:rw
    networks:
      - todo_network
    ports:
      - "4444:5432"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  postgres_test:
    image: postgres:15.2-alpine
    container_name: todo_postgres_test
    environment:
      - POSTGRES_DB=test_database
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test_password
    networks:
      - todo_network
    ports:
      - "4445:5432"
    restart: always

  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: todo_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VIRTUAL_HOST}
    volumes:
      - todo_rabbitmq_volume:/var/lib/rabbitmq:rw
    networks:
      - todo_network
    ports:
      - "15672:15672"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q ping" ]
      interval: 5s
      timeout: 5s
      retries: 10

  flower:
    image: mher/flower:1.2
    command:
      [
        "celery",
        "--broker=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:5672/${RABBITMQ_VIRTUAL_HOST}",
        "flower",
        "--broker_api=http://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:15672/api/",
        "--basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}"
      ]
    networks:
      - todo_network
    ports:
      - "5555:5555"
    restart: always

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: todo_mailhog
    networks:
      - todo_network
    ports:
      - "1025:1025"
      - "8025:8025"
    restart: always

networks:
  todo_network:
    name: todo_network
    driver: bridge

volumes:
  todo_postgres_volume:
    name: todo_postgres_volume
    driver: local
  todo_rabbitmq_volume:
    name: todo_rabbitmq_volume
    driver: local
